syntax = "proto3";

option go_package = "api/";

/// API dải 4xx 

message api
{
    string name = 1; // Human readable name of the API. It is used for identification purposes but does not act as an index.
    string slug = 2; // The URL segment that will map to this API
    string api_id = 3; //The identifier for the API This should be unique, but can actually be any kind of string.
    string proxy_listen_path = 4;
    string proxy_target_url = 5;
    bool active = 6; //When used in conjunction with the dashboard, if set to false means that on start, restart or reload, the API will be ignored and all paths and routes for that API will cease to be proxied.
    string user_create_id = 7;
    uint64 created_at = 8;
    
}

message tokenkey
{
    uint32 allowance = 1; /// allowance & rate: these should be set to the same value, these are the users allowance during a period as set by per.
    uint32 rate = 2;
    uint32 per = 3; // The time in seconds where a rate limit is applied.
    double quota_max = 4; // The usage quota for the user. => can only be a positive number, or -1 (unlimited).
    double quota_renews = 5; // the Unix timestamp when the quota is renewed.
    double quota_renewal_rate = 6; // The time, in seconds, of when the quota gets renewed (e.g. 86400 would represent 1 day).
    string key_id = 7;
    string org_id = 8;
    string name = 9;
    double expires = 10; //The date when the key expires. => expires can only be a positive number, or -1 (unlimited).
    repeated api apis = 11; // danh sách api mà token này áp dụng 
}

//{"type":400, "group":"MARKET", "request":{"@type":"type.googleapis.com/MarketPing.Request"}}
// ==> {"reply":{"@type":"type.googleapis.com/MarketPing.Reply", "ver":"v0.9.0", "serverTime":"2023-02-06 10:13:17.383644174 +0700 +07 m=+65.934983180"}}
message MarketPing
{
    message Request{}
    message Reply
    {
        string ver = 1;
        string server_time = 2;
    }
    uint32 ID = 400;
}

message GetListAPI // lấy về danh sách api đã được khai trên hệ thống
{
    message Request
    {
        string search_name = 1;
        uint32 page = 2;
        uint32 limit = 3;
    }
    message Reply
    {
        repeated api apis = 1;
        uint32 total_page = 2;
    }
    enum ERROR
    {
         NO_ERROR = 0;
    }
    uint32 ID = 401;
}
message CreateAPI
{
    message Request
    {
        api api = 1;
    }
    message Reply
    {
        api api = 1;
    }
    uint32 ID = 402;
    enum ERROR
    {
         NO_ERROR = 0;
         NAME_EMPTY = 1;
         NAME_INVALID = 2;
         SLUG_EMPTY = 3;
         SLUG_INVALID = 4;
         SLUG_EXISTED = 5;
         PROXY_TARGET_URL_INVALID = 6;
         PROXY_TARGET_URL_EMPTY = 7;
         ACCESS_DENIED = 8;
    }

}
message UpdateAPI
{
    message Request
    {
        api api = 1;
    }
    message Reply
    {
        api api = 1;
    }
    uint32 ID = 403;
}
message DeleteAPI
{
    message Request
    {
        string api_id = 1;
    }
    message Reply
    {

    }
    uint32 ID = 404;

    enum ERROR
    {
         NO_ERROR = 0;
         API_ID_EMPTY = 1;
         API_NOT_FOUND = 2;
         ACCESS_DENIED = 3;
    }
}

// CRUD Key 

message GetListKey
{
    message Request
    {
        string search = 1;
        uint32 page = 2;
        uint32 perPage = 3;
    }
    message Reply
    {
        repeated tokenkey keys = 1;
        uint32 total_page = 2;
    }
    uint32 ID = 405;
}
message CreateKey
{
    message Request
    {

    }
    message Reply
    {
       tokenkey keys = 1; 
    }
    uint32 ID = 406;
}
message UpdateKey
{
    message Request
    {
        tokenkey keys = 1; 
    }
    message Reply
    {
       tokenkey keys = 1; 
    }
    uint32 ID = 407;
}

message DeleteKey
{
    message Request
    {
        string key_id = 1; 
    }
    message Reply
    {

    }
    uint32 ID = 408;
}

